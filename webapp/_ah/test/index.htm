<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>wgthr tests</title>
        <link rel="stylesheet" href="qunit.css" />
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
        <script type="text/javascript" src="../../scripts/common.js"></script>
        <script type="text/javascript" src="jquery.json.min.js"></script>
        <script type="text/javascript" src="qunit.js"></script>
        <script type="text/javascript">
            $(function() {
                
                $.w.rest.config.baseUrl = '../..';
                $.w.rest.config.error = function(jq,status,error) {
                    ok( false, 'retrieve failed with status ' + status + '\nError:\n' + error);
                    start();
                };
                
                (function() {
                    
                    module("Testing REST Services");
                
                    var gathering = {
                        'organizerEmail': 'organizer@domain.com',
                        'title': 'Mineo\'s @ 8 PM',
                        'invitations': ['attendee1@domain.com', 'attendee2@domain.com']
                    };
                
                    asyncTest("create a new gathering", function() {
                        $.w.rest.createGathering(gathering, function(data,textStatus,jqxhr) {
                            equal(jqxhr.status, '200', 'gathering created\n' + $.toJSON(data));
                            notEqual(data.key, null, 'should have a key');
                            equal(data.organizerEmail, gathering.organizerEmail, 'should have correct organizer email');
                            equal(data.title, gathering.title, 'should have correct title');
                            if(data.invitations)
                                equal(data.invitations.length, gathering.invitations.length, 'should have same number of invitations');
                            equal( typeof data.key, typeof '', 'should return a string representation of the gathering key, returned ' + $.toJSON(data.key));
                                
                            $(data.invitations).each(function(i,a) {
                                var invitation = $(gathering.invitations).filter(function(j,k) { return k == a.emailAddress; })[0];
                                notEqual( invitation, null, "should be an invitation that was posted");
                                equal(invitation.vote, null, "should have a null vote");
                                equal( typeof data.key, typeof '', 'should return a string representation of the invitation key, returned ' + $.toJSON(data.key));
                            });
                                
                            gathering = data;
                            start();
                            testRetrieveGatheringByKey();
                        });
                    });
                    
                    var testEqual = function(got, expected) {
                        equal( got.key, expected.key, 'successfully retrieved\n' + $.toJSON(got));
                        equal( got.title, expected.title, 'should have same title');
                        equal( typeof( got.invitations ), 'object', 'should have attendees');
                        if(got.invitations) equal( got.invitations.length, expected.invitations.length, 'should have same number of invitations');
                    };
                
                    var testRetrieveGatheringByKey = function() {
                        asyncTest("retrieving gathering information by key", function() {
                
                            $.w.rest.gathering(gathering.key, function(data) {
                                testEqual(data, gathering);
                                start();
                                testRetrieveGatheringByInvitation(data.invitations[0].key);
                            });
                        });
                    };
                    
                    var testRetrieveGatheringByInvitation = function(key) {
                        asyncTest("retrieving gathering by invite key", function() {
                            
                            $.w.rest.gatheringByInvite(key, function(data) {
                                testEqual(data, gathering);
                                equal( data.key, gathering.key, 'successfully retrieved\n' + $.toJSON(data));
                                start();
                            });
                        });
                    };
                })();
            });

        </script>
    </head>
    <body>
        <h1 id="qunit-header">QUnit example</h1>
        <h2 id="qunit-banner"></h2>
        <div id="qunit-testrunner-toolbar"></div>
        <h2 id="qunit-userAgent"></h2>
        <ol id="qunit-tests"></ol>
        <div id="qunit-fixture">test markup, will be hidden</div>
    </body>
</html>